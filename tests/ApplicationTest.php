<?php
require_once dirname(__FILE__) . '/../src/Application.php';
require_once dirname(__FILE__) . '/../src/Request.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-06-20 at 20:20:27.
 */
class ApplicationTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Application
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        //Suppress sendHeaders
        $this->object = $this->getMock(
            "Application",
            array('sendHeaders')
        );
        $this->object->setControllerPath(__DIR__ . '/controllers');
        $this->object
            ->expects($this->any())
            ->method("sendHeaders")
            ->will($this->returnValue(null));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testDefaultBootstrapInstance()
    {
        $this->assertInstanceOf("Bootstrap", $this->object->getBootstrap());
    }

    /**
     * @covers Application::bootstrap
     * @covers Application::getBootstrap
     */
    public function testBootstrap()
    {
        $this->object->bootstrap("hello", function(){return "ciao";});
        $boot = $this->object->getBootstrap()->getResource("hello");

        $this->assertEquals($boot, "ciao");
    }

    /**
     * Resources must bootstrap onetime
     *
     * @covers Application::getBootstrap
     */
    public function testGetMultipleTimes()
    {
        $this->object->bootstrap("hello", function(){
            return new View();
        });
        $boot = $this->object->getBootstrap()->getResource("hello");
        $boot2 = $this->object->getBootstrap()->getResource("hello");

        $this->assertSame($boot, $boot2);
    }

    public function testSetGetControllerPath()
    {
        $this->object->setControllerPath(__DIR__);

        $this->assertEquals(__DIR__, $this->object->getControllerPath());
    }

    public function testSetGetEventManager()
    {
        $mng = new EventManager();
        $this->object->setEventManager($mng);

        $this->assertSame($mng, $this->object->getEventManager());
    }

    /**
     * @expectedException RuntimeException
     */
    public function testBootstrapNotCallable()
    {
        $this->object->bootstrap("up", "not-callable");
    }

    public function testMissingLayout()
    {
        $request = new Request();
        $request->setUri("/error/error");

        $this->object->bootstrap("view", function(){
            $v = new View();
            $v->setViewPath(__DIR__ . '/views');

            return $v;
        });
        $this->object->setControllerPath(__DIR__ . '/controllers');

        ob_start();
        $this->object->run($request);
        $content = ob_get_contents();
        ob_end_clean();

        $this->assertEquals("--> error action <--", $content);

    }

    public function testErrorPages()
    {
        $request = new Request();
        $request->setUri("/invalid/controller");

        ob_start();
        $this->object->run($request);
        $errorPage = ob_get_contents();
        ob_end_clean();

        $this->assertEquals("--> error action <--", $errorPage);
    }

    public function testInitAction()
    {
        ob_start();
        $this->object->run(new Request("init/index"));
        $initOutput = ob_get_contents();
        ob_end_clean();

        $this->assertEquals("<-- init -->", $initOutput);
    }

    public function testPreDispatchHook()
    {
        $app = '';
        $this->object->getEventManager()->subscribe("pre.dispatch", function($r, $app){
            $r->setControllerName("admin");
            $r->setActionName("login");
        });

        ob_start();
        $this->object->run(new Request("/init/index"));
        $adminOutput = ob_get_contents();
        ob_end_clean();

        $this->assertEquals("<-- admin login -->", $adminOutput);
    }

    public function testThenMethod()
    {
        ob_start();
        $this->object->run(new Request("/then/first"));
        $thenOutput = ob_get_contents();
        ob_end_clean();

        $this->assertEquals("first-><-second", $thenOutput);
    }

    /**
     * @expectedException RuntimeException
     */
    public function testMissingAction()
    {
        $this->object->setControllerPath(__DIR__);
        $this->object->run(new Request("/admin/missing-action"));
    }

    public function testMissingEventManager()
    {
        $app = new Application();
        $eventManager = $app->getEventManager();
        $this->assertInstanceOf("EventManager", $eventManager);
    }

    public function testLayout()
    {
        $this->object->bootstrap("layout", function(){
            $l = new Layout();
            $l->setScriptName("layout.phtml");
            $l->setViewPath(__DIR__ . '/layouts');
            return $l;
        });

        ob_start();
        $this->object->run(new Request("/init/index"));
        $content = ob_get_contents();
        ob_end_clean();

        $this->assertEquals("<body><-- init --></body>", $content);
    }

    public function testLayoutViewHelpersPass()
    {

        $this->object->bootstrap('layout', function(){
            $l = new Layout();
            $l->setScriptName("title-helper.phtml");
            $l->setViewPath(__DIR__ . '/layouts');


            return $l;
        });

        $this->object->bootstrap('view', function(){
            $v = new View();
            $v->setViewPath(__DIR__ . '/views');

            $v->addHelper("title", function($part = false){
                static $parts = array();
                static $delimiter = ' :: ';

                return ($part === false) ? implode($delimiter, $parts) : $parts[] = $part;
            });

            return $v;
        });

        ob_start();
        $this->object->run(new Request("/general/title-helper"));
        $content = ob_get_contents();
        ob_end_clean();

        $this->assertEquals("<title>the title helper :: second</title>", $content);
    }

    public function testEmptyPullDrivenRequest()
    {
        $this->object->bootstrap("view", function(){
            $v = new View();
            $v->setViewPath(__DIR__ . '/views');

            return $v;
        });

        ob_start();
        $this->object->run(new Request("/general/pull-driven"));
        $content = ob_get_contents();
        ob_end_clean();

        $this->assertEquals("<p>Pull-driven experience</p>", $content);
    }

    public function testCompletelyMissingPullDrivenRequest()
    {
        $this->object->setControllerPath(null);
        $this->object->bootstrap("view", function(){
            $v = new View();
            $v->setViewPath(__DIR__ . '/views');

            return $v;
        });

        ob_start();
        $this->object->run(new Request("/pull/driven"));
        $content = ob_get_contents();
        ob_end_clean();

        $this->assertEquals("<h1>Complete pull driven</h1>", $content);
    }

    public function testCompletelyMissingPullWithDataDrivenRequest()
    {
        $this->object->bootstrap("view", function(){
            $v = new View();
            $v->setViewPath(__DIR__ . '/views');

            return $v;
        });

        ob_start();
        $this->object->run(new Request("/pull/driven-data"));
        $content = ob_get_contents();
        ob_end_clean();

        $this->assertEquals("<h2>Controller Data</h2>", $content);
    }

    public function testMissingControllerPull()
    {
        $this->object->bootstrap("view", function(){
            $v = new View();
            $v->setViewPath(__DIR__ . '/views');

            return $v;
        });

        ob_start();
        $this->object->run(new Request("/pull/missing-pull"));
        $content = ob_get_contents();
        ob_end_clean();

        $this->assertEquals("--> error action <--", $content);
    }

    public function testMissingActionPull()
    {
        $this->object->bootstrap("view", function(){
            $v = new View();
            $v->setViewPath(__DIR__ . '/views');

            return $v;
        });

        ob_start();
        $this->object->run(new Request("/pull/missing-pull-action"));
        $content = ob_get_contents();
        ob_end_clean();

        $this->assertEquals("--> error action <--", $content);
    }

    public function testViewSwitch()
    {
        $this->object->bootstrap("view", function(){
            $v = new View();
            $v->setViewPath(__DIR__ . '/views');

            return $v;
        });

        ob_start();
        $this->object->run(new Request("/general/a"));
        $content = ob_get_contents();
        ob_end_clean();

        $this->assertEquals("This is B", $content);
    }

    public function testViewRewrited()
    {
        $this->object->bootstrap("view", function(){
            $v = new View();
            $v->addViewPath(__DIR__ . '/views');
            $v->addViewPath(__DIR__ . '/views-rewrite');

            return $v;
        });

        ob_start();
        $this->object->run(new Request("/general/c"));
        $content = ob_get_contents();
        ob_end_clean();

        $this->assertEquals("This is C but rewrited", $content);
    }

    public function testViewPullRewrited()
    {
        $this->object->bootstrap("view", function(){
            $v = new View();
            $v->addViewPath(__DIR__ . '/views');
            $v->addViewPath(__DIR__ . '/views-rewrite');

            return $v;
        });

        ob_start();
        $this->object->run(new Request("/general/d"));
        $content = ob_get_contents();
        ob_end_clean();

        $this->assertEquals("This is D but rewrited", $content);
    }

    public function testPartialViewRewrite()
    {
        $this->object->bootstrap("view", function(){
            $v = new View();
            $v->addViewPath(__DIR__ . '/views');
            $v->addViewPath(__DIR__ . '/views-rewrite');

            return $v;
        });

        ob_start();
        $this->object->run(new Request("/general/partial-eg"));
        $content = ob_get_contents();
        ob_end_clean();

        $this->assertEquals('<h1>ciao</h1>', $content);
    }



    public function testBufferOutPullRequest()
    {
        $this->object->bootstrap("view", function(){
            $v = new View();
            $v->addViewPath(__DIR__ . '/views');

            return $v;
        });

        ob_start();
        $this->object->run(new Request("/pull/buffer-out"));
        $content = ob_get_contents();
        ob_end_clean();

        $this->assertEquals('<p><em>ret from out</em></p>', $content);
    }

    public function testLoopStartupHook()
    {
        $loopStartup = 0;
        $this->object->getEventManager()->subscribe(
            "loop.startup", function ($app) use (&$loopStartup){

            $loopStartup += 1;
        });

        ob_start();
        $this->object->run(new Request("/"));
        ob_end_clean();

        $this->assertSame(1, $loopStartup);
    }

    public function testLoopShutdownHook()
    {
        $shutdown = 0;
        $this->object->getEventManager()->subscribe(
            "loop.shutdown", function ($app) use (&$shutdown) {
                $shutdown += 1;
            }
        );

        ob_start();
        $this->object->run(new Request("/"));
        ob_end_clean();
        $this->assertSame(1, $shutdown);
    }

    public function testPrePostDispatch()
    {
        $preDispatch = 0;
        $postDispatch = 0;

        $this->object->getEventManager()->subscribe(
            "pre.dispatch", function ($router, $app) use (&$preDispatch) {
                ++$preDispatch;
                var_dump(1);
            }
        );

        $this->object->getEventManager()->subscribe(
            "post.dispatch", function ($app) use (&$postDispatch) {
                ++$postDispatch;
            }
        );

        ob_start();
        $this->object->run(new Request("/admin/login"));
        ob_end_clean();

        $this->assertSame(1, $preDispatch);
        $this->assertSame(1, $postDispatch);
    }

    public function testMultiplePrePostDispatch()
    {
        $preDispatch = 0;
        $postDispatch = 0;

        $this->object->getEventManager()->subscribe(
            "pre.dispatch", function ($router, $app) use (&$preDispatch) {
                $preDispatch += 1;
            }
        );

        $this->object->getEventManager()->subscribe(
            "post.dispatch", function ($app) use (&$postDispatch) {
                ++$postDispatch;
            }
        );

        ob_start();
        $this->object->run(new Request("/then/first"));
        ob_end_clean();

        $this->assertSame(2, $preDispatch);
        $this->assertSame(2, $postDispatch);
    }

    public function testDisableLayout()
    {
        $this->object->bootstrap("view", function(){
            $v = new View();
            $v->addViewPath(__DIR__ . '/views');

            return $v;
        });


        $this->object->bootstrap("layout", function(){
            $v = new Layout();
            $v->addViewPath(__DIR__ . '/layouts');
            $v->setScriptName("layout");

            return $v;
        });

        ob_start();
        $this->object->run(new Request("/general/disable-layout"));
        $content = ob_get_contents();
        ob_end_clean();

        $this->assertEquals("Only this view...", trim($content));
    }
}
