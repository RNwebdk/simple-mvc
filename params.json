{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"### Welcome to simple-mvc.\r\n`simple-mvc` is a simple and full stack push & pull MVC framework for PHP 5.3+. The project is heavly inspired to different PHP microframeworks and ZF1 framework.\r\nThe main goal of this framework is create a test-driven experience. The second aspect is to introducing people to PHP MVC frameworks. Getting started with this framework is very simple. First of all get the code using `github` or if you prefer use `composer`. The recommended way is through composer. Create a file named `composer.json` and add these lines\r\n\r\n```json\r\n{\r\n    \"require\": {\r\n        \"wdalmut/simple-mvc\": \"*\"\r\n    }\r\n}\r\n```\r\n\r\nNow you can install the framework.\r\n\r\n```shell\r\ncurl -s http://getcomposer.org/installer | php\r\nphp composer.phar install\r\n```\r\n\r\nComposer creates a vendor folder with simple-mvc framework.\r\n\r\n### Create the project using Composer\r\nYou can skip the base project creation (explained below [Getting started]) and create the base project with Composer.\r\n\r\n```shell\r\n$ curl -s http://getcomposer.org/installer | php\r\n$ php composer.phar create-project wdalmut/simple-mvc-app my-project-name\r\n```\r\n\r\nComposer download and install into `my-project-name`  folder `simple-mvc` and creates the base requirements:\r\n\r\n * public folders (web)\r\n * private folders (app)\r\n\r\nIn addition, it creates also a controller with associated view: the index page. You have only to add a virtual host that's point into `web` folder (See `Create your Virtual Host section`).\r\n\r\nYou can skip the Getting Started section.\r\n\r\n### Getting started (FULL STACK)\r\nYou have to create four folders. These folders separate all parts of your project.\r\n\r\n * controllers\r\n * views\r\n * layouts\r\n * public\r\n\r\nThe `controllers` folder contains your controllers, `views` your views (HTML files), `layout` the container of your views and the `public` that contains only the entry point of `simple-mvc` application, the `.htaccess` to force Apache webserver on this entry point and all of your static entries.\r\n\r\n### Create the entry point (`index.php`)\r\nInto your `public` folder create a file named `index.php`. This file is the only requested by your webserver. The minimum configuration is the follow\r\n\r\n```php\r\n<?php\r\nrequire_once __DIR__ . '/../vendor/autoload.php';\r\n\r\n$app = new Application();\r\n$app->setControllerPath(__DIR__ . '/../controllers');\r\n\r\n$app->bootstrap(\"view\", function(){\r\n    $view = new View();\r\n    $view->setViewPath(__DIR__ . '/../views');\r\n    \r\n    return $view;\r\n});\r\n\r\n$app->bootstrap(\"layout\", function(){\r\n    $layout = new Layout();\r\n    $layout->setViewPath(__DIR__ . '/../layouts');\r\n    \r\n    return $layout;\r\n});\r\n\r\n$app->run();\r\n```\r\n\r\nAlways into your `public` folder create another file named `.htaccess` and add this content:\r\n\r\n```\r\nRewriteEngine  On\r\nRewriteCond  %{REQUEST_FILENAME}  -s  [OR]\r\nRewriteCond  %{REQUEST_FILENAME}  -l  [OR]\r\nRewriteCond  %{REQUEST_FILENAME}  -d\r\nRewriteRule  ^.*$  -  [NC,L]\r\nRewriteRule  ^.*$  index.php  [NC,L]\r\n```\r\n\r\nThe `.htaccess` use the Rewrite module of your Apache webserver (`a2enmod rewrite` to turn it on) and force the `index.php` file execution if a resource is missing.\r\n\r\n### Controllers\r\n\r\nNow you have to create a new file `IndexController.php` into `controllers` folder\r\n\r\n```php\r\n<?php\r\nclass IndexController extends Controller\r\n{\r\n    public function indexAction()\r\n    {\r\n        $this->view->helloText = \"Hello World\";\r\n    }\r\n}\r\n```\r\n\r\n### The View\r\n\r\nNow we have to create a view for the `indexAction`. View system search for a view using the controller name, in this case `index`, as a folder and the action name, in this case `index` too, as a filename. For that reason you have to create a folder named `index` into your `views` and inside this folder create a file named `index.phtml`. The content of `index.phtml` should be like\r\n\r\n```php\r\n<p>\r\n    <?php echo $this->helloText; ?>\r\n</p>\r\n```\r\n\r\nAs you can see the view doesn't contains the HTML page because is a role of the layout system to encapsulating views. \r\n\r\n### The Layout\r\n\r\nFor that reason create a file named `layout.phtml` into your `layouts` folder. The content should be like this:\r\n\r\n```php\r\n<html>\r\n    <head>\r\n        <title>simple-mvc :: hello world</title>\r\n    </head>\r\n    <body>\r\n        <?php echo $this->content; ?>\r\n    </body>\r\n</html>\r\n```\r\n\r\n### Create your Virtual Host\r\n\r\nOk, now we are ready to see simple-mvc. You have only to configure your Apache webserver that use the `public` folder as entry-point. Create a new virtual host\r\n\r\n```\r\n<VirtualHost *:80>\r\n    ServerAdmin dev@localhost\r\n    DocumentRoot /path/to/your/project/public\r\n    ServerName simple-mvc.local\r\n\r\n    <Directory \"/path/to/your/project/public\">\r\n        Options -Indexes FollowSymLinks\r\n        AllowOverride all\r\n        allow from all\r\n    </Directory>\r\n</VirtualHost>\r\n```\r\n\r\nRemember that you have to modify your `hosts` file adding the rule\r\n\r\n```\r\n127.0.0.1    simple-mvc.local\r\n```\r\n\r\nRestart your Apache webserver and go with your browser to `http://simple-mvc.local/`.\r\n\r\n### Route map to Controller-View\r\n\r\nThe router map your HTTP request to an action. `simple-mvc` router is pretty simple you can use only `controller/action` routes. For that reason if you get the page `http://simple-mvc.local/tip/tap` you are asking for `TipController` class that contains `tapAction` method. On the view side you have a folder named `tip` that contains `tap.phtml` file.\r\n\r\n### Controllers and views stack\r\n\r\nYou can push onto a stack another action during one action execution. This can be useful for stacking views. For doing this task simple call the `then` action helper.\r\n\r\n```php\r\n<?php\r\n// Controller\r\npublic function indexAction()\r\n{\r\n    // Action flow\r\n    $this->then(\"/ctr/another\");\r\n}\r\n```\r\n\r\nThe `simple-mvc` append the view of `anotherAction()` of `CtrController` class at bottom of `index` view. You can push actions continuously.\r\n\r\n### Header control\r\n\r\nHeaders are important. `simple-mvc` has a simple header manager. You can add `headers` that are emitted at the right time using the `addHeader()` method or you could remove all using `clearHeaders()` method.\r\n\r\n```php\r\n<?php\r\npublic function textAction()\r\n{\r\n    //...\r\n    $this->addHeader(\"Content-Type\", \"text/plain\");\r\n    //...\r\n\r\n    // Clear all headers.\r\n    $this->clearHeaders();\r\n}\r\n```\r\n\r\n### Redirect action helper\r\n\r\nIf you want to redirect you action to another using the `redirect()` method. The redirection use the `3xx` series to redirect the client to another action. The method is really simple, you pass the destination path  and the code for redirection (302 Temporary Redirect).\r\n\r\n```php\r\npublic function oneAction()\r\n{\r\n    $this->redirect(\"/act/b\", 302);\r\n}\r\n```\r\n\r\nYou can skip the redirect code, the framework will send `301` automatically.\r\n\r\n### View and Layout management\r\n\r\nSometimes could be useful remove the attached view from a controller or disable the layout. Suppose that you want to produce a WS (webservice). The view is useless and the layout is completely useless. `simple-mvc` support layout and view suppression. See the XML example\r\n\r\n```php\r\n<?php\r\nclass WsController extends Controller\r\n{\r\n    /**\r\n     * <ping>pong</ping>\r\n     */\r\n    public function pingAction()\r\n    {\r\n        // Remove the attached view\r\n        $this->setNoRender();\r\n        // Remove the layout\r\n        $this->disableLayout();\r\n        \r\n        // Create the XML\r\n        $dom = new DOMDocument(\"1.0\", \"UTF-8\");\r\n        $element = $dom->createElement(\"ping\", \"pong\");\r\n        $dom->appendChild($element);\r\n        \r\n        // Show the XML\r\n        echo $dom->saveXML();\r\n        \r\n        // Emit the right headers\r\n        $this->addHeader(\"Content-Type\", \"text/xml\");\r\n    }\r\n}\r\n```\r\n\r\n### View helpers\r\n\r\n`simple-mvc` support view helpers. In practice support two types of view helpers: view and layout helpers. The only difference is that view helpers are shared with layouts and not vice-versa. For that reason if you want to create a global helper append it into the `view` bootstrap operation otherwise append during layout bootstrap. A typical layout view helper is the `title` view helper, in few word a mechanism that allow an user to construct the page title during the application loop: starts with a title, an action add a title portion and so on. This kind of helper must be shared on layout and view because the title typically is in the layout view but modification is admitted in action views. A simple implementation of layout helper is:\r\n\r\n```php\r\n<?php\r\n$app->bootstrap('layout', function(){\r\n    $layout = new Layout();\r\n    $layout->setViewPath(__DIR__ . '/../layouts');\r\n\r\n    // Add my app name\r\n    $layout->title(\"My App\");\r\n    \r\n    return $layout;\r\n});\r\n\r\n$app->bootstrap('view', function(){\r\n    $view = new View();\r\n    $view->addViewPath(__DIR__ . '/../views');\r\n\r\n    // Append the view helper!\r\n    $view->addHelper(\"title\", function($part = false){\r\n        static $parts = array();\r\n        static $delimiter = ' :: ';\r\n    \r\n        return ($part === false) ? implode($delimiter, $parts) : $parts[] = $part;\r\n    });\r\n\r\n    return $view;\r\n});\r\n```\r\n\r\nInside your view you can append a title part.\r\n\r\n```php\r\n<?php\r\n// Action view (eg. index.phtml)\r\n$this->title(\"Index Page\");\r\n```\r\n\r\nInto your `layout.phtml`\r\n\r\n```html\r\n<html>\r\n    <head><title><?php echo $this->title() ?></title></head>\r\n```\r\n\r\nThe title will be: `My App :: Index Page`\r\n\r\n### Partial Views\r\n\r\n`simple-mvc` support partials. You can append partial views at runtime using `partial()` view helper.\r\n\r\n```php\r\n<!-- index/index.phtml -->\r\n<div class=\"complex\">\r\n    <?php \r\n      // view path, data\r\n       echo $this->partial(\r\n            \"/path/to/complex.phtml\", \r\n            array('title' => $this->title)\r\n        );\r\n    ?>\r\n</div>\r\n```\r\n\r\nIn the partial view:\r\n\r\n```php\r\n<!-- path/to/complex.phtml -->\r\n<div>\r\n    <h3><?php echo $this->title; ?></h3>\r\n    <!-- continue -->\r\n</div>\r\n```\r\n\r\n### Pre defined hooks (events)\r\n\r\n`simple-mvc` has a list of pre defined hooks:\r\n 1. `loop.startup` - called once, when the system start up\r\n 2. `pre.dispatch` - called before any `action`\r\n 3. `post.dispatch` - called after any `action`\r\n 4. `loop.shutdown` - called once, when the system close the loop\r\n\r\nAdding events is a simple operation, see an example with `pre.dispatch` hook.\r\n\r\n```php\r\n<?php\r\n$app->getEventManager()->subscribe(\"pre.dispatch\", function($router, $app) {\r\n    // Use a real and better auth system\r\n    if ($_SESSION[\"auth\"] !== true \r\n         && $router->getControllerName() != 'admin' \r\n         && $router->getActionName() != 'login') {\r\n\r\n        // Rewrite the endpoint\r\n        $router->setControllerName(\"admin\");\r\n        $router->setActionName(\"login\");\r\n\r\n        // Change the layout\r\n        $app->getBootstrap(\"layout\")->setScriptName(\"admin.phtml\");\r\n    }\r\n});\r\n```\r\n\r\n### Add new events\r\n\r\nCreate new hook definition:\r\n\r\n```php\r\n<?php\r\n$app->getEventManager()->subscribe(\"my.hook\", function($app) {/*The body*/});\r\n```\r\n\r\nRaise the event:\r\n\r\n```php\r\n<?php\r\n// Call the hook named \"my.hook\" and pass the app as first arg.\r\n$app->getEventManager()->publish(\"my.hook\", array($app));\r\n```\r\n\r\n### Pull driven requests\r\n\r\nTypically MVC frameworks are \"push\" based. In otherwords use mechanisms to \"push\" data to \r\na view and not vice-versa. A \"pull\" framework instead request (\"pull\") data from a view.\r\n\r\nPull strategy is useful for example during a `for` statement (not only for that [obviously]...). Look \r\nfor an example:\r\n\r\n```php\r\n<?php foreach ($this->users as $user) : ?>\r\n<?php\r\n    // Pull data from a controller. \r\n    $userDetail = $this->pull(\"/detail/user/id/{$user->id}\");\r\n?>\r\n<div class=\"element\">\r\n    <div class=\"name\"><?php echo $userDetail->username;?></div>\r\n    <!-- other -->\r\n</div>\r\n<?php endforeach; ?>\r\n```\r\n\r\nThe view require a `pull` operation from a controller named `detail` and action `user`. See it:\r\n\r\n```php\r\n<?php\r\nclass DetailController extends Controller\r\n{\r\n    public function userAction()\r\n    {\r\n        $params = $this->getParams();\r\n\r\n        $model = new MyModel();\r\n        $data = $model->getById($params[\"id\"]);\r\n\r\n        return $data;\r\n    }\r\n}\r\n``` \r\n\r\nYou can use a \"pull\" controller as a normal controller with the attached view, but remember\r\nthat when you request for a \"pull\" operation the view is never considered and the framework\r\nremove it without consider the output, only the `return` statement will be used.\r\n\r\n### Multiple view scripts paths\r\n\r\n`simple-mvc` support multiple views scripts paths. In other words you can specify\r\na single mount point `/path/to/views` after that you can add anther views script path,\r\nthis mean that the `simple-mvc` search for a view previously into the second views path\r\nand if it is missing looks for that into the first paths. View paths are threated as \r\na stack, the latest pushed is the first used.\r\n\r\nDuring your bootstrap add more view paths\r\n\r\n```\r\n$app->bootstrap('view', function(){\r\n    $view = new View();\r\n    $view->addViewPath(__DIR__ . '/../views');\r\n    $view->addViewPath(__DIR__ . '/../views-rewrite');\r\n    \r\n    return $view;\r\n});\r\n```\r\n\r\nIf you have a view named `name.phtml` into `views` folder and now you create the view\r\nnamed `name.phtml` into `views-rewrite` this one is used instead the original file in \r\n`views` folder.\r\n\r\n\r\n### Authors and Contributors\r\nThis project is maintained by @wdalmut. \r\n\r\n### Support or Contact\r\nHaving trouble with simple-mvc? You can contact me walter.dalmut@gmail.com.","name":"simple-mvc","tagline":"Simple MVC [VC] framework to realize a test-driven experience. ","google":""}